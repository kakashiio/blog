<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Unity-IOC</title>
    <url>/2022/05/03/Unity-IOC/</url>
    <content><![CDATA[<h1 id="本文目的"><a href="#本文目的" class="headerlink" title="本文目的"></a>本文目的</h1><p>向大家介绍:</p>
<ol>
<li>在开发中为何要使用<code>IoC</code></li>
<li>如何开实现一个精简的<code>IoC</code></li>
<li>使用<code>IoC</code>前后代码带来怎样的变化</li>
<li>我当前在开发的<code>IoC</code>类库</li>
</ol>
<blockquote>
<p>如果你对<code>1</code>、<code>2</code>、<code>3</code>都已经很熟了,并且对我的项目感兴趣,可以直接跳我的<code>IoC</code>仓库.完整的工程地址在<a href="https://github.com/kakashiio/Unity-IOC">https://github.com/kakashiio/Unity-IOC</a>,该<code>IoC</code>仓库也是我的Unity游戏框架计划<a href="https://github.com/kakashiio/Unity-SourceFramework">https://github.com/kakashiio/Unity-SourceFramework</a>中的一部分.</p>
</blockquote>
<span id="more"></span>

<h1 id="为什么要使用IoC"><a href="#为什么要使用IoC" class="headerlink" title="为什么要使用IoC"></a>为什么要使用IoC</h1><p>想象一下,当你在实现一个UI管理器<code>UIManager</code>时,当在<code>UIManager</code>中需要加载UI资源时,你是通过何种方式加载资源的.</p>
<p>一般开发诸如<code>AssetManager</code>、<code>TimeManager</code>、<code>EventManager</code>等<code>管理器(Manager)</code>时.喜欢采用静态方法或单例.这样做是为了使得项目能方便地引用这些管理器.</p>
<p>常见的实现代码:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Create</span>&lt;<span class="title">T</span>&gt;(<span class="params">Action&lt;T&gt; onCreate</span>) <span class="keyword">where</span> T : IUI</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> assetPath = _GetAssetPath&lt;T&gt;();</span><br><span class="line">        AssetManager.Instantiate&lt;GameObject&gt;((go)=&gt;&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="keyword">new</span> T();</span><br><span class="line">            t.Init(go);</span><br><span class="line">            onCreate?.Invoke(t);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Create</span>&lt;<span class="title">T</span>&gt;(<span class="params">Action&lt;T&gt; onCreate</span>) <span class="keyword">where</span> T : IUI</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> assetPath = _GetAssetPath&lt;T&gt;();</span><br><span class="line">        Singleton&lt;AssetManager&gt;.Instance.Instantiate&lt;GameObject&gt;((go)=&gt;&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="keyword">new</span> T();</span><br><span class="line">            t.Init(go);</span><br><span class="line">            onCreate?.Invoke(t);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然静态方法或单例都能实现想要的效果,但或多或少会带来负面的效果.比如耦合严重,难以测试等等.因此本文引入一种已经很成熟的设计思路<code>IoC</code>,一步步实现一个简单的<code>IoC</code>容器,并且将<code>IoC</code>应用到实际中.大家也可以对比感受引入<code>IoC</code>前后代码发生的变化.</p>
<h1 id="IoC简述"><a href="#IoC简述" class="headerlink" title="IoC简述"></a>IoC简述</h1><p><code>IoC(Inversion of Control,控制反转)</code>通常也被称为<code>DI(Dependency Injection,依赖注入)</code>.他是将传统对象依赖从内部指定改为外部决定的过程.比如上面的<code>UIManager</code>中内部指定了使用<code>AssetManager</code>.当使用<code>IoC</code>设计时,代码会修改为:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IAssetManager _AssetManager;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIManager</span>(<span class="params">IAssetManager assetManager</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _AssetManager = assetManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Create</span>&lt;<span class="title">T</span>&gt;(<span class="params">Action&lt;T&gt; onCreate</span>) <span class="keyword">where</span> T : IUI</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> assetPath = _GetAssetPath&lt;T&gt;();</span><br><span class="line">        _AssetManager.Instantiate&lt;GameObject&gt;((go)=&gt;&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="keyword">new</span> T();</span><br><span class="line">            t.Init(go);</span><br><span class="line">            onCreate?.Invoke(t);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是引入<code>IoC</code>最简单的例子,即把内部采用哪个<code>IAssetManager</code>实现的权力转移给外部,因此称为<code>IoC(Inversion of Control,控制反转)</code>,由于<code>UIManager</code>依赖了<code>IAssetManager</code>而且将其实现通过外部构造传入,因此也称<code>DI(Dependency Injection,依赖注入)</code>.</p>
<p>但是这样的代码明显不够方便,因为需要自己在构造时传入<code>IAssetManager</code>,如果只是<code>UIManager</code>需要传入<code>IAssetManager</code>实例还好,实际上可以预见的是<code>SceneManager</code>、<code>UnitManager</code>、<code>EffectManager</code>等类可能都需要<code>IAssetManager</code>,那么最终可能会有类似这样的代码:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> assetManager = <span class="keyword">new</span> AssetManager();</span><br><span class="line">        <span class="keyword">var</span> uiManager = <span class="keyword">new</span> UIManager(assetManager);</span><br><span class="line">        <span class="keyword">var</span> sceneManager = <span class="keyword">new</span> SceneManager(assetManager);</span><br><span class="line">        <span class="keyword">var</span> unitManager = <span class="keyword">new</span> UnitManager(assetManager);</span><br><span class="line">        <span class="keyword">var</span> effectManager = <span class="keyword">new</span> EffectManager(assetManager);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的代码重复、而且没有意义、不同的人反复在这里添加自己的代码也容易引发冲突和错误.我们应该编写一个更智能的<code>IoC</code>框架来帮助我们完成这些事情.</p>
<h1 id="编写IoC框架"><a href="#编写IoC框架" class="headerlink" title="编写IoC框架"></a>编写IoC框架</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>由于我们需要大量使用反射完成一些工作,因此通过PackageManager依赖我之前开源的用于反射的Package<a href="https://github.com/kakashiio/Unity-Reflection">https://github.com/kakashiio/Unity-Reflection</a></p>
<p>打开Unity的PackageManager并点击左上角的<code>“+”</code>按钮,选择<code>&quot;Add package from git URL...&quot;</code>并填入该地址<a href="https://github.com/kakashiio/Unity-Reflection.git#1.0.0">https://github.com/kakashiio/Unity-Reflection.git#1.0.0</a></p>
<h2 id="IoC容器"><a href="#IoC容器" class="headerlink" title="IoC容器"></a>IoC容器</h2><h3 id="定义IoC容器接口"><a href="#定义IoC容器接口" class="headerlink" title="定义IoC容器接口"></a>定义IoC容器接口</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IIOCContainer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 实例化`type`类型的对象并注入其所有字段和属性</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;type&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="built_in">object</span> <span class="title">InstanceAndInject</span>(<span class="params">Type type</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 实例化类型为`T`的对象并注入其所有字段和属性</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function">T <span class="title">InstanceAndInject</span>&lt;<span class="title">T</span>&gt;()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 为一个已存在的对象`obj`注入其所有字段和属性</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;recursive&quot;&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 如果recursive == true, 那么instance的字段也会被递归注入</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Inject</span>(<span class="params"><span class="built_in">object</span> obj, <span class="built_in">bool</span> recursive = <span class="literal">false</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 查找`type`类型或`type`类型子类的对象.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;type&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="built_in">object</span> <span class="title">FindObjectOfType</span>(<span class="params">Type type</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 查找`T`类型或`T`类型子类的对象.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function">T <span class="title">FindObjectOfType</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : <span class="keyword">class</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 查找所有`type`类型或`type`类型子类的对象.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;type&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function">List&lt;<span class="built_in">object</span>&gt; <span class="title">FindObjectsOfType</span>(<span class="params">Type type</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 查找所有`T`类型或`T`类型子类的对象.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;type&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">FindObjectsOfType</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : <span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>IIOCContainer</code>接口主要定义了一个IOC容器对外提供的服务.比如外部可以通过<code>FindObjectOfType</code>查找某个类型在容器中创建的实例、或者通过<code>InstanceAndInject</code>创建一个指定类型的对象,<code>InstanceAndInject</code>方法与<code>new</code>创建对象不同在于<code>InstanceAndInject</code>创建的对象会被容器管理,同时会自动按设计的约定注入字段.</p>
<p>这里每个方法都写了比较详细的注释.如果目前大家还不是很清楚,主要可能是对于<code>IoC</code>还不太熟悉,这关系不大.后面会通过实际使用的例子回过来深入介绍细节.接下来先把该接口的实现和另外几个比较重要的类的源码给出来,目前大家只要先大概浏览一下即可.</p>
<h3 id="实现IoC容器"><a href="#实现IoC容器" class="headerlink" title="实现IoC容器"></a>实现IoC容器</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IOCContainer</span> : <span class="title">IIOCContainer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ITypeContainer _TypeContainer;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">object</span>&gt; _Instances = <span class="keyword">new</span> List&lt;<span class="built_in">object</span>&gt;();</span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;<span class="built_in">object</span>&gt; _InjectedObj = <span class="keyword">new</span> HashSet&lt;<span class="built_in">object</span>&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;Type, <span class="built_in">object</span>&gt; _FindCache = <span class="keyword">new</span> Dictionary&lt;Type, <span class="built_in">object</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IOCContainer</span>(<span class="params">ITypeContainer typeContainer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _TypeContainer = typeContainer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> inheritedFromIOCComponent = Reflections.GetTypes(_TypeContainer, <span class="keyword">typeof</span>(IOCComponent));</span><br><span class="line">        <span class="keyword">var</span> typesWithIOCComponent = Reflections.GetTypesWithAttributes(_TypeContainer, inheritedFromIOCComponent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> type <span class="keyword">in</span> typesWithIOCComponent)</span><br><span class="line">        &#123;</span><br><span class="line">            _Instances.Add(_Instance(type));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Inject all type&#x27;s field or property</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> instance <span class="keyword">in</span> _Instances)</span><br><span class="line">        &#123;</span><br><span class="line">            Inject(instance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">InstanceAndInject</span>(<span class="params">Type type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> instance = _Instance(type);</span><br><span class="line">        Inject(instance);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">InstanceAndInject</span>&lt;<span class="title">T</span>&gt;()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) InstanceAndInject(<span class="keyword">typeof</span>(T));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Inject</span>(<span class="params"><span class="built_in">object</span> obj, <span class="built_in">bool</span> recursive = <span class="literal">false</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (obj.GetType().IsPrimitive)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (recursive)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_InjectedObj.Contains(obj))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            _InjectedObj.Add(obj);    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> propertiesOrFields = Reflections.GetPropertiesAndFields&lt;Autowired&gt;(obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> propertyOrField <span class="keyword">in</span> propertiesOrFields)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> fieldValue = FindObjectOfType(propertyOrField.GetFieldOrPropertyType());</span><br><span class="line">            propertyOrField.SetValue(obj, fieldValue);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (recursive)</span><br><span class="line">            &#123;</span><br><span class="line">                Inject(fieldValue, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">FindObjectOfType</span>(<span class="params">Type type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_FindCache.ContainsKey(type))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _FindCache[type];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">object</span> instance <span class="keyword">in</span> _Instances)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(type.IsAssignableFrom(instance.GetType()))</span><br><span class="line">            &#123;</span><br><span class="line">                _FindCache.Add(type, instance);</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">FindObjectOfType</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FindObjectOfType(<span class="keyword">typeof</span>(T)) <span class="keyword">as</span> T;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;<span class="built_in">object</span>&gt; <span class="title">FindObjectsOfType</span>(<span class="params">Type type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _FindObjectsOfType(<span class="keyword">typeof</span>(<span class="built_in">object</span>), o =&gt; o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">FindObjectsOfType</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _FindObjectsOfType(<span class="keyword">typeof</span>(T), o =&gt; o <span class="keyword">as</span> T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">object</span> _Instance(Type type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Activator.CreateInstance(type);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; _<span class="title">FindObjectsOfType</span>&lt;<span class="title">T</span>&gt;(<span class="params">Type type, Func&lt;<span class="built_in">object</span>, T&gt; mapper</span>) <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">object</span> instance <span class="keyword">in</span> _Instances)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> objType = instance.GetType();</span><br><span class="line">            <span class="keyword">if</span>(type.IsAssignableFrom(objType))</span><br><span class="line">            &#123;</span><br><span class="line">                list.Add(mapper(instance));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的实现中有几个类尚未定义,下面继续定义缺失的类.</p>
<h3 id="IoC容器需要的其他类定义"><a href="#IoC容器需要的其他类定义" class="headerlink" title="IoC容器需要的其他类定义"></a>IoC容器需要的其他类定义</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> IOC组件的Attribute</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 当自定义的类上使用了该Attribute时,那么该类会被容器自动创建</span></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IOCComponent</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> 自动注入的Attribute</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 标记了IOCComponent的类或通过IIOCContainer.InstanceAndInject、IIOCContainer.Inject</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建的对象,其所有标记了Autowired的字段或属性会由IOC容器自动注入实例</span></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Field|AttributeTargets.Property)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Autowired</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>OK,依然如前所述,对于接触不多的人而言,该框架信息量确实比较大,请先放松.接下来通过实际使用的例子,再深入讲解上面的源码.</p>
<h1 id="IoC框架使用示例"><a href="#IoC框架使用示例" class="headerlink" title="IoC框架使用示例"></a>IoC框架使用示例</h1><h2 id="定义各种测试用Manager"><a href="#定义各种测试用Manager" class="headerlink" title="定义各种测试用Manager"></a>定义各种测试用Manager</h2><h3 id="日志管理类"><a href="#日志管理类" class="headerlink" title="日志管理类"></a>日志管理类</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">IOCComponent</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> LogLevel _LogLevel = LogLevel.Debug;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params">LogLevel level, <span class="built_in">string</span> templte, <span class="keyword">params</span> <span class="built_in">object</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (level &lt; _LogLevel)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> msg = args == <span class="literal">null</span> || args.Length == <span class="number">0</span> ? templte : <span class="built_in">string</span>.Format(templte, args);</span><br><span class="line">        msg = <span class="string">$&quot;[<span class="subst">&#123;level&#125;</span>] Frame=<span class="subst">&#123;Time.frameCount&#125;</span> Time=<span class="subst">&#123;Time.time&#125;</span> -- <span class="subst">&#123;msg&#125;</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (level)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> LogLevel.Debug:</span><br><span class="line">            <span class="keyword">case</span> LogLevel.Info:</span><br><span class="line">                Debug.Log(msg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LogLevel.Warning:</span><br><span class="line">                Debug.LogWarning(msg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LogLevel.Exception:</span><br><span class="line">                Debug.LogException(<span class="keyword">new</span> Exception(msg));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LogLevel.Error:</span><br><span class="line">                Debug.LogError(msg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> LogLevel</span><br><span class="line">&#123;</span><br><span class="line">    Debug,</span><br><span class="line">    Info,</span><br><span class="line">    Warning,</span><br><span class="line">    Exception,</span><br><span class="line">    Error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该类只是用于做简单的日志记录,会被后续其他Manager依赖使用.</p>
<p>注意到这个管理类上使用<code>IOCComponent</code>这一<code>Attribute</code>进行修饰.后续其他管理类也是如此.后续会解释为什么要这么做.</p>
<h3 id="协程管理类"><a href="#协程管理类" class="headerlink" title="协程管理类"></a>协程管理类</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">IOCComponent</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CoroutineManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> CoroutineRunner _CoroutineRunner;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoroutineManager</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> go = <span class="keyword">new</span> GameObject(<span class="string">&quot;CoroutineRunner&quot;</span>);</span><br><span class="line">        _CoroutineRunner = go.AddComponent&lt;CoroutineRunner&gt;();</span><br><span class="line">        GameObject.DontDestroyOnLoad(go);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartCoroutine</span>(<span class="params">IEnumerator enumerator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _CoroutineRunner.StartCoroutine(enumerator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CoroutineRunner</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该类只是用于简单的协程调用,会被后续其他Manager依赖使用</p>
<h3 id="资源管理类"><a href="#资源管理类" class="headerlink" title="资源管理类"></a>资源管理类</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">IOCComponent</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AssetManager</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Autowired</span>] </span><br><span class="line">    <span class="keyword">private</span> CoroutineManager _CoroutineManager;</span><br><span class="line">    [<span class="meta">Autowired</span>] </span><br><span class="line">    <span class="keyword">private</span> LogManager _LogManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> assetPath, Action&lt;T&gt; onLoaded</span>) <span class="keyword">where</span> T : Object</span></span><br><span class="line">    &#123;</span><br><span class="line">        _CoroutineManager.StartCoroutine(_LoadAsync(assetPath, onLoaded));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IEnumerator _LoadAsync&lt;T&gt;(<span class="built_in">string</span> assetPath, Action&lt;T&gt; onLoaded) <span class="keyword">where</span> T : Object</span><br><span class="line">    &#123;</span><br><span class="line">        _LogManager.Log(LogLevel.Debug, <span class="string">&quot;Loading &#123;0&#125;&quot;</span>, assetPath);</span><br><span class="line">        <span class="comment">// Your load code here</span></span><br><span class="line">        <span class="comment">// Now just wait for some seconds for demo</span></span><br><span class="line">        <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">3</span></span>)</span>;</span><br><span class="line">        T loadedAsset = <span class="literal">default</span>(T);</span><br><span class="line">        _LogManager.Log(LogLevel.Debug, <span class="string">&quot;Loaded &#123;0&#125; asset=&#123;1&#125;&quot;</span>, assetPath, loadedAsset);</span><br><span class="line">        onLoaded?.Invoke(loadedAsset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>资源管理类,可以看到该类依赖了<code>CoroutineManager</code>和<code>LogManager</code>,但是没有对外提供这两个对象的设置.</p>
<h3 id="GameObject管理类"><a href="#GameObject管理类" class="headerlink" title="GameObject管理类"></a>GameObject管理类</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">IOCComponent</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameObjectManager</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Autowired</span>]</span><br><span class="line">    <span class="keyword">private</span> AssetManager _AssetManager;</span><br><span class="line">    [<span class="meta">Autowired</span>]</span><br><span class="line">    <span class="keyword">private</span> LogManager _LogManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Instantiate</span>(<span class="params"><span class="built_in">string</span> assetPath, Action&lt;GameObject&gt; onLoaded</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _AssetManager.LoadAsync(assetPath, (GameObject prefab) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (prefab == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _LogManager.Log(LogLevel.Debug, <span class="string">&quot;Failed to instantiate &#123;0&#125;&quot;</span>, assetPath);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> go = GameObject.Instantiate(prefab);</span><br><span class="line">            onLoaded?.Invoke(go);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GameObject管理类,可以看到该类也依赖了<code>CoroutineManager</code>和<code>LogManager</code>,和<code>AssetManager</code>一样没有对外提供这两个对象的设置.</p>
<p>那么,这样的代码是否能工作呢,我们接着编写测试类.</p>
<h2 id="测试依赖注入"><a href="#测试依赖注入" class="headerlink" title="测试依赖注入"></a>测试依赖注入</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BasicDemo</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> typeContainer = <span class="keyword">new</span> TypeContainerCollection(<span class="keyword">new</span> []</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> TypeContainer(Assembly.GetExecutingAssembly()),</span><br><span class="line">            <span class="keyword">new</span> TypeContainer(<span class="keyword">typeof</span>(IOCComponent).Assembly)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">var</span> iocContainer = <span class="keyword">new</span> IOCContainer(typeContainer);</span><br><span class="line">        </span><br><span class="line">        GameObjectManager gameObjectManager = iocContainer.FindObjectOfType&lt;GameObjectManager&gt;();</span><br><span class="line">        gameObjectManager.Instantiate(<span class="string">&quot;&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到,这个类主要就是创建了一个<code>IoC</code>容器<code>IOCContainer</code>对象,接着从该容器中查找<code>GameObjectManager</code>,接着通过<code>GameObjectManager</code>实例化一个对象.</p>
<p>可以把该类挂到场景中任意对象上,然后运行场景.发现Unity会输出以下Log.</p>
<img src="/2022/05/03/Unity-IOC/1-demo-log.jpg" class="" title="Demo Log">

<p>可以看到,我们并没有手动为各个Manager传入依赖,但是目前而言,通过<code>IOCContainer</code>为我们自动创建的Manager确实自动注入了依赖.</p>
<h2 id="为何能实现注入"><a href="#为何能实现注入" class="headerlink" title="为何能实现注入"></a>为何能实现注入</h2><p>那么是什么时候创建了各个管理器的实例,又是什么时候设置了管理器之间的依赖.我们重新对<code>IOCContainer</code>的构造函数进行分析.</p>
<h3 id="IOCContainer的构造函数"><a href="#IOCContainer的构造函数" class="headerlink" title="IOCContainer的构造函数"></a>IOCContainer的构造函数</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">IOCContainer</span>(<span class="params">ITypeContainer typeContainer</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _TypeContainer = typeContainer;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1 */</span></span><br><span class="line">    <span class="keyword">var</span> inheritedFromIOCComponent = Reflections.GetTypes(_TypeContainer, <span class="keyword">typeof</span>(IOCComponent));</span><br><span class="line">    <span class="comment">/* 2 */</span></span><br><span class="line">    <span class="keyword">var</span> typesWithIOCComponent = Reflections.GetTypesWithAttributes(_TypeContainer, inheritedFromIOCComponent);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3 */</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> type <span class="keyword">in</span> typesWithIOCComponent)</span><br><span class="line">    &#123;</span><br><span class="line">        _Instances.Add(_Instance(type));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4 */</span></span><br><span class="line">    <span class="comment">// Inject all type&#x27;s field or property</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> instance <span class="keyword">in</span> _Instances)</span><br><span class="line">    &#123;</span><br><span class="line">        Inject(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注释1</code>的代码表示从<code>_TypeContainer</code>中获取从<code>IOCComponent</code>这一<code>Attribute</code>继承的所有<code>Attribute</code>,如果<code>_TypeContainer</code>中包含了<code>IOCComponent</code>,那么返回的列表中也会有<code>IOCComponent</code>.</p>
<blockquote>
<p><code>_TypeContainer</code>为<code>ITypeContainer</code>类型,顾名思义,它是类型容器,用于返回我们可能需要处理的所有类型.具体使用我会在<code>Unity-Reflection</code>库中补充文档说明.</p>
</blockquote>
<p><code>注释2</code>的代码表示从<code>_TypeContainer</code>中获取类型列表,该列表中的类型需要满足:类上使用了<code>inheritedFromIOCComponent</code>列表中任意<code>Attribute</code>进行修饰.其实按我们目前的例子看,由于我们的所有<code>Manager</code>都使用了<code>IOCComponent</code>进行修饰,那么这里的列表如果仅包含<code>IOCComponent</code>,应当也能查询到我们定义的管理类.那么为什么不直接使用<code>new List&lt;Type&gt; &#123; typeof(IOCComponent) &#125;</code>替代<code>注释1</code>返回的<code>inheritedFromIOCComponent</code>呢.这是因为我想增加一点拓展性.当你想让自己定义的<code>Attribute</code>也能被<code>IOCContainer</code>识别时,你的<code>Attribute</code>可以从<code>IOCComponent</code>继承,那么<code>注释1</code>将能找到你自己定义的<code>Attribute</code>,此时你用自己定义的<code>Attribute</code>修饰类时,该类也能被查找到.</p>
<p><code>注释3</code>的循环作用为遍历<code>注释2</code>返回的类型列表,并且调用<code>_Instance</code>方法将其实例化,并添加到<code>_Instances</code>列表中,以便后续有其他查找需求.目前<code>_Instance</code>方法只是简单通过<code>Activator.CreateInstance(type);</code>创建了实例并返回.</p>
<p><code>注释4</code>的循环作用为遍历<code>注释3</code>实例化的<code>_Instances</code>列表,并调用<code>Inject</code>方法进行字段的依赖注入.我们的各个Manager字段的注入就是在此方法中进行的.接下来详细讲解<code>Inject</code>方法</p>
<h3 id="Inject方法"><a href="#Inject方法" class="headerlink" title="Inject方法"></a>Inject方法</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Inject</span>(<span class="params"><span class="built_in">object</span> obj, <span class="built_in">bool</span> recursive = <span class="literal">false</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obj.GetType().IsPrimitive)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (recursive)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 1 */</span></span><br><span class="line">        <span class="keyword">if</span> (_InjectedObj.Contains(obj))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _InjectedObj.Add(obj);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2 */</span></span><br><span class="line">    <span class="keyword">var</span> propertiesOrFields = Reflections.GetPropertiesAndFields&lt;Autowired&gt;(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> propertyOrField <span class="keyword">in</span> propertiesOrFields)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 3 */</span></span><br><span class="line">        <span class="keyword">var</span> fieldValue = FindObjectOfType(propertyOrField.GetFieldOrPropertyType());</span><br><span class="line">        <span class="comment">/* 4 */</span></span><br><span class="line">        propertyOrField.SetValue(obj, fieldValue);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (recursive)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 5 */</span></span><br><span class="line">            Inject(fieldValue, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法主要用于对字段进行依赖注入.</p>
<p><code>注释1</code>主要用于当需要递归注入时,如果发现一个对象已经注入过,则跳过,防止递归陷入死循环.</p>
<p><code>注释2</code>获取<code>obj</code>中所有使用<code>Autowired</code>这一<code>Attribute</code>修饰的字段或属性.<code>Autowired</code>为前面定义的<code>Attribute</code>,我们通过这一<code>Attribute</code>标识哪些字段需要容器自动注入.</p>
<p><code>注释3</code>通过<code>FindObjectOfType</code>从<code>IoC</code>容器中找到类型和字段或属性类型相匹配的对象,查找会匹配类型.我们后面再细讲<code>FindObjectOfType</code>是如何实现的.</p>
<p><code>注释4</code>将<code>注释3</code>找到的对象设置进字段,完成该字段注入.</p>
<p><code>注释5</code>如果开启递归注入,则对该字段的值也进行注入.</p>
<h3 id="FindObjectOfType方法"><a href="#FindObjectOfType方法" class="headerlink" title="FindObjectOfType方法"></a>FindObjectOfType方法</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">FindObjectOfType</span>(<span class="params">Type type</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1-Start */</span></span><br><span class="line">    <span class="keyword">if</span> (_FindCache.ContainsKey(type))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _FindCache[type];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 1-End */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">object</span> instance <span class="keyword">in</span> _Instances)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 2-Start */</span></span><br><span class="line">        <span class="keyword">if</span>(type.IsAssignableFrom(instance.GetType()))</span><br><span class="line">        &#123;</span><br><span class="line">            _FindCache.Add(type, instance);</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 2-End */</span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注释1-Start</code>到<code>注释1-End</code>中间的代码为从<code>_FindCache</code>中进行查找.如果之前已经通过该方法查到过该类型,那么该类型会进入<code>_FindCache</code>缓存,后续查找的时间复杂度就仅为O(1).</p>
<p><code>注释2-Start</code>到<code>注释2-End</code>中间的代码为从已经实例化的<code>_Instances</code>中查找有没有能赋值给<code>type</code>类型的对象,如果有,则加入到<code>_FindCache</code>缓存并且返回结果.可以发现这里使用了<code>Type.IsAssignableFrom</code>进行类型匹配,因此如果你的字段使用了接口或某个父类,也能正常进行注入.接下来我们增加一个<code>ILogManager</code>接口测试一下.</p>
<h2 id="将LogManager改为接口"><a href="#将LogManager改为接口" class="headerlink" title="将LogManager改为接口"></a>将LogManager改为接口</h2><h3 id="新增接口ILogManager"><a href="#新增接口ILogManager" class="headerlink" title="新增接口ILogManager"></a>新增接口ILogManager</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILogManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params">LogLevel level, <span class="built_in">string</span> templte, <span class="keyword">params</span> <span class="built_in">object</span>[] args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> LogLevel</span><br><span class="line">&#123;</span><br><span class="line">    Debug,</span><br><span class="line">    Info,</span><br><span class="line">    Warning,</span><br><span class="line">    Exception,</span><br><span class="line">    Error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新增<code>ILogManager</code>接口,并将<code>LogManager</code>中的枚举<code>LogLevel</code>删移动过来.</p>
<h3 id="修改LogManager"><a href="#修改LogManager" class="headerlink" title="修改LogManager"></a>修改LogManager</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">IOCComponent</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogManager</span> : <span class="title">ILogManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> LogLevel _LogLevel = LogLevel.Debug;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params">LogLevel level, <span class="built_in">string</span> templte, <span class="keyword">params</span> <span class="built_in">object</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (level &lt; _LogLevel)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> msg = args == <span class="literal">null</span> || args.Length == <span class="number">0</span> ? templte : <span class="built_in">string</span>.Format(templte, args);</span><br><span class="line">        msg = <span class="string">$&quot;[<span class="subst">&#123;level&#125;</span>] Frame=<span class="subst">&#123;Time.frameCount&#125;</span> Time=<span class="subst">&#123;Time.time&#125;</span> -- <span class="subst">&#123;msg&#125;</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (level)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> LogLevel.Debug:</span><br><span class="line">            <span class="keyword">case</span> LogLevel.Info:</span><br><span class="line">                Debug.Log(msg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LogLevel.Warning:</span><br><span class="line">                Debug.LogWarning(msg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LogLevel.Exception:</span><br><span class="line">                Debug.LogException(<span class="keyword">new</span> Exception(msg));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LogLevel.Error:</span><br><span class="line">                Debug.LogError(msg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让<code>LogManager</code>实现<code>ILogManager</code>接口</p>
<h3 id="修改AssetManager的字段"><a href="#修改AssetManager的字段" class="headerlink" title="修改AssetManager的字段"></a>修改AssetManager的字段</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">IOCComponent</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AssetManager</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Autowired</span>] </span><br><span class="line">    <span class="keyword">private</span> CoroutineManager _CoroutineManager;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Autowired</span>] </span><br><span class="line">    <span class="comment">/* 1 */</span></span><br><span class="line">    <span class="keyword">private</span> ILogManager _LogManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> assetPath, Action&lt;T&gt; onLoaded</span>) <span class="keyword">where</span> T : Object</span></span><br><span class="line">    &#123;</span><br><span class="line">        _CoroutineManager.StartCoroutine(_LoadAsync(assetPath, onLoaded));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IEnumerator _LoadAsync&lt;T&gt;(<span class="built_in">string</span> assetPath, Action&lt;T&gt; onLoaded) <span class="keyword">where</span> T : Object</span><br><span class="line">    &#123;</span><br><span class="line">        _LogManager.Log(LogLevel.Debug, <span class="string">&quot;Loading &#123;0&#125;&quot;</span>, assetPath);</span><br><span class="line">        <span class="comment">// Your load code here</span></span><br><span class="line">        <span class="comment">// Now just wait for some seconds for demo</span></span><br><span class="line">        <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">3</span></span>)</span>;</span><br><span class="line">        T loadedAsset = <span class="literal">default</span>(T);</span><br><span class="line">        _LogManager.Log(LogLevel.Debug, <span class="string">&quot;Loaded &#123;0&#125; asset=&#123;1&#125;&quot;</span>, assetPath, loadedAsset);</span><br><span class="line">        onLoaded?.Invoke(loadedAsset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注释1</code>可以看到之前字段<code>_LogManager</code>从<code>LogManager</code>类型修改为接口类型<code>ILogManager</code>.</p>
<p>同样地,将<code>GameObjectManager</code>中字段<code>_LogManager</code>从<code>LogManager</code>类型修改为接口类型<code>ILogManager</code>.</p>
<p>重新运行场景,发现结果和之前不使用接口是一样的.</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>以上为了更容易讲明白<code>IoC</code>的实现原理,一步步实现了一个极简的<code>IoC</code>容器,实际上该容器还缺少很多特性,比如<code>AOP</code>、比如支持通过配置指定注入不同实例等.更完整的<code>IoC</code>框架已经在下面GITHUB中开发维护.</p>
<p>完整的Package工程地址在<a href="https://github.com/kakashiio/Unity-IOC">https://github.com/kakashiio/Unity-IOC</a></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>大家也可以通过PackageManager引用:打开Unity的PackageManager并点击左上角的<code>“+”</code>按钮,选择<code>&quot;Add package from git URL...&quot;</code>,加入如下两个地址</p>
<table>
<thead>
<tr>
<th>Package地址</th>
<th>说明</th>
<th>Git地址</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/kakashiio/Unity-Reflection.git#1.0.0">https://github.com/kakashiio/Unity-Reflection.git#1.0.0</a></td>
<td>IOC依赖的反射库</td>
<td><a href="https://github.com/kakashiio/Unity-Reflection">https://github.com/kakashiio/Unity-Reflection</a></td>
</tr>
<tr>
<td><a href="https://github.com/kakashiio/Unity-IOC.git#1.0.0">https://github.com/kakashiio/Unity-IOC.git#1.0.0</a></td>
<td>IOC容器库</td>
<td><a href="https://github.com/kakashiio/Unity-IOC">https://github.com/kakashiio/Unity-IOC</a></td>
</tr>
</tbody></table>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢百忙之中阅读本文,如果觉得我的文章帮到了你,欢迎:转载、关注git、为仓库增加star等.你的简单回馈将是我继续创作的动力.</p>
]]></content>
      <categories>
        <category>Unity3D</category>
        <category>代码设计与架构</category>
        <category>C#</category>
        <category>代码设计与架构</category>
      </categories>
      <tags>
        <tag>Unity3D</tag>
        <tag>C#</tag>
        <tag>代码设计</tag>
        <tag>架构</tag>
        <tag>Ioc</tag>
      </tags>
  </entry>
</search>
